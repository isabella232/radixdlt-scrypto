initSidebarItems({"attr":[["auth","Defines the authorization rule for a method."]],"derive":[["NonFungibleData","Derive code that describe a non-fungible data structure."]],"enum":[["LogLevel","Represents the level of a log message."],["NewSupply","Represents some supply of resource."],["ResourceType","Represents the type of a resource."]],"fn":[["call_engine","Utility function for making a radix engine call."],["scrypto_decode","Decodes an instance of `T` from a slice."],["scrypto_encode","Encodes a data structure into byte array."]],"macro":[["blueprint","Declares a blueprint."],["import","Imports a blueprint from its ABI."],["vec","Creates a `Vec` containing the arguments."]],"mod":[["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["BTreeMap","A map based on a B-Tree."],["BTreeSet","A set based on a B-Tree."],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["String","A UTF-8–encoded, growable string."],["Vec","A contiguous growable array type, written as `Vec<T>` and pronounced ‘vector’."]],"trait":[["FromStr","Parse a value from a string"],["ToOwned","A generalization of `Clone` to borrowed data."],["ToString","A trait for converting a value to a `String`."]]});